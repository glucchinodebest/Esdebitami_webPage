/*     */ package it.esdebitamiretake.retake_ticket.utils;
/*     */ 
/*     */ import java.sql.Timestamp;
/*     */ import java.text.ParseException;
/*     */ import java.text.SimpleDateFormat;
/*     */ import java.util.Calendar;
/*     */ import java.util.Date;
/*     */ import java.util.Locale;
/*     */ import java.util.TimeZone;
/*     */ import org.slf4j.Logger;
/*     */ import org.slf4j.LoggerFactory;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SmartDate
/*     */ {
/*     */   public static final long MILLIS_PER_SECOND = 1000L;
/*     */   public static final long MILLIS_PER_MINUTE = 60000L;
/*     */   public static final long MILLIS_PER_HOUR = 3600000L;
/*     */   public static final long MILLIS_PER_DAY = 86400000L;
/*     */   private Calendar smartDate;
/*  24 */   private static final Logger logger = LoggerFactory.getLogger(Thread.currentThread().getStackTrace()[1].getClass());
/*     */   
/*     */   public SmartDate() {
/*  27 */     this.smartDate = toCalendar(new Date());
/*     */   }
/*     */   
/*     */   public SmartDate(Calendar theCalendar) {
/*  31 */     this.smartDate = theCalendar;
/*     */   }
/*     */   
/*     */   public SmartDate(Calendar theCalendar, TimeZone theTimeZone) {
/*  35 */     theCalendar.setTimeZone(theTimeZone);
/*  36 */     this.smartDate = theCalendar;
/*     */   }
/*     */   
/*     */   public SmartDate(Date theDate) {
/*  40 */     this.smartDate = toCalendar(theDate);
/*     */   }
/*     */   
/*     */   public SmartDate(Date theDate, TimeZone theTimeZone) {
/*  44 */     this.smartDate = toCalendar(theDate, theTimeZone);
/*     */   }
/*     */   
/*     */   public SmartDate(Timestamp theTstamp) {
/*  48 */     this.smartDate = toCalendar(theTstamp);
/*     */   }
/*     */   
/*     */   public SmartDate(Timestamp theTstamp, TimeZone theTimeZone) {
/*  52 */     this.smartDate = toCalendar(theTstamp, theTimeZone);
/*     */   }
/*     */   
/*     */   public SmartDate(long theMillis) {
/*  56 */     this(new Date(theMillis));
/*     */   }
/*     */   
/*     */   public SmartDate(long theMillis, TimeZone theTimeZone) {
/*  60 */     this(new Date(theMillis), theTimeZone);
/*     */   }
/*     */   
/*     */   public SmartDate(String theStringDate, String thePattern) throws ParseException {
/*  64 */     this(theStringDate, thePattern, TimeZone.getDefault());
/*     */   }
/*     */   
/*     */   public SmartDate(String theStringDate, String thePattern, TimeZone theTimeZone) throws ParseException
/*     */   {
/*  69 */     SimpleDateFormat formatter = new SimpleDateFormat(thePattern);
/*  70 */     formatter.setTimeZone(theTimeZone);
/*  71 */     Date dt = formatter.parse(theStringDate);
/*  72 */     this.smartDate = toCalendar(dt);
/*     */   }
/*     */   
/*     */   public Calendar toCalendar() {
/*  76 */     return this.smartDate;
/*     */   }
/*     */   
/*     */   public Date toDate() {
/*  80 */     return this.smartDate.getTime();
/*     */   }
/*     */   
/*     */   public Timestamp toTimestamp() {
/*  84 */     return new Timestamp(this.smartDate.getTimeInMillis());
/*     */   }
/*     */   
/*     */   public String toChar(String thePattern) {
/*  88 */     logger.info("Init Method toChar({})", thePattern);
/*  89 */     SimpleDateFormat formatter = new SimpleDateFormat(thePattern);
/*  90 */     return formatter.format(this.smartDate.getTime());
/*     */   }
/*     */   
/*     */   public String toChar(String thePattern, TimeZone theTimeZone) {
/*  94 */     SimpleDateFormat formatter = new SimpleDateFormat(thePattern);
/*  95 */     formatter.setTimeZone(theTimeZone);
/*  96 */     return formatter.format(this.smartDate.getTime());
/*     */   }
/*     */   
/*     */   public long toMillis() {
/* 100 */     return this.smartDate.getTimeInMillis();
/*     */   }
/*     */   
/*     */   public SmartDate addDays(int theDays) {
/* 104 */     return new SmartDate(toMillis() + 86400000L * theDays);
/*     */   }
/*     */   
/*     */   public static long getTimeInMillis()
/*     */   {
/* 109 */     return Calendar.getInstance().getTimeInMillis();
/*     */   }
/*     */   
/*     */   public static long getIntervalTimeInMillis(long theInitTimeInMillis) {
/* 113 */     return Calendar.getInstance().getTimeInMillis() - theInitTimeInMillis;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   private static Calendar toCalendar(Date theDate)
/*     */   {
/* 123 */     Calendar calendar = Calendar.getInstance();
/* 124 */     calendar.setTime(theDate);
/* 125 */     return calendar;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   private static Calendar toCalendar(Date theDate, TimeZone theTimeZone)
/*     */   {
/* 135 */     Calendar calendar = Calendar.getInstance();
/* 136 */     calendar.setTimeZone(theTimeZone);
/* 137 */     calendar.setTime(theDate);
/* 138 */     return calendar;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static Calendar toCalendar(Timestamp theTstamp)
/*     */   {
/* 148 */     Calendar calendar = Calendar.getInstance();
/* 149 */     calendar.setTime(theTstamp);
/* 150 */     return calendar;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static String toChar(Date theDate, String thePattern)
/*     */   {
/* 163 */     SimpleDateFormat formatter = new SimpleDateFormat(thePattern);
/* 164 */     return formatter.format(theDate);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static Date toDate(String theStringDate, String thePattern)
/*     */     throws ParseException
/*     */   {
/* 250 */     SimpleDateFormat formatter = new SimpleDateFormat(thePattern);
/* 251 */     return formatter.parse(theStringDate);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static int diffInDaysAbs(Calendar theFirstCal, Calendar theSecondCal)
/*     */   {
/* 423 */     return Math.abs(Math.round(
/* 424 */       (float)((theFirstCal.getTimeInMillis() - theSecondCal.getTimeInMillis()) / 86400000L)));
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static int diffInDaysAbs(Date date1, Date date2)
/*     */   {
/* 435 */     return diffInDaysAbs(toCalendar(date1), toCalendar(date2));
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static int diffInDays(Calendar theFirstCal, Calendar theSecondCal)
/*     */   {
/* 446 */     return 
/* 447 */       Math.round((float)((theFirstCal.getTimeInMillis() - theSecondCal.getTimeInMillis()) / 86400000L));
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static int diffInDays(Date date1, Date date2)
/*     */   {
/* 458 */     return diffInDays(toCalendar(date1), toCalendar(date2));
/*     */   }
/*     */   
/*     */   public String toString(String thePattern) {
/* 462 */     StringBuilder builder = new StringBuilder();
/* 463 */     builder.append(toChar(thePattern));
/* 464 */     return builder.toString();
/*     */   }
/*     */ }


/* Location:              C:\Users\dercolano\Desktop\VVA\vas-template\vas-template-1.0.0.jar!\BOOT-INF\classes\it\isspa\vas\templat\\utils\SmartDate.class
 * Java compiler version: 7 (51.0)
 * JD-Core Version:       0.7.1
 */