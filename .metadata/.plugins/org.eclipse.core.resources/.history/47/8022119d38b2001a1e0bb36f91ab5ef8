package it.esdebitamiretake.retake_ticket.controller;

import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.List;
import org.apache.axis2.client.Options;
import org.json.simple.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import org.tempuri.XSportService;
import org.tempuri.XSportService.XSpGetApplication;
import org.tempuri.XSportService.XSpIsCurrentSessionAuthenticate;
import org.tempuri.XSportService.XSpIsCurrentSessionAuthenticateResponse;


import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.SwaggerDefinition;
import io.swagger.annotations.Tag;

@SwaggerDefinition(tags = { @Tag(name = "Installation", description = "Operations of installation in VVAS") })
@RestController
@CrossOrigin(allowedHeaders = "*", origins = "*")
public class InstallationController {

	//private static final Logger logger = LoggerFactory.getLogger(InstallationController.class);

	private static final String MESSAGE_401 = "You are not authorized to perform this action";

	@Autowired
	private ActivityService activityService;
	
	@Autowired
	private SettingService settingService;
	
	@Autowired
	private ColorService colorService;
	
	@Autowired
	private TemplateTypeService templateTypeService;
	
	@Autowired
	private AnagraphicService anagraphicService;

	@SuppressWarnings("unchecked")
	@PostMapping(value = "/installation", produces = "application/json")
	@ResponseStatus(HttpStatus.CREATED)
	@ApiOperation(value = "Create the installation documents", tags = "installations")
	@ApiResponses(value = { @ApiResponse(code = 201, message = "Installation completed!"),
			@ApiResponse(code = 401, message = MESSAGE_401) })
	@ResponseBody
	public JSONObject postInstallation(@RequestHeader("Authorization") String accessToken) throws RemoteException, ResourceNotFoundException {

		JSONObject response = new JSONObject();
		
		String appName = loadApplicationName(accessToken);
		
		List<Activity> activityList = activityService.findAll();
		System.out.println("activity"+activityList.size());
		
		List<Color> colorList = colorService.findByapplication(appName);
		System.out.println("color"+colorList.size());
		
		List<Setting> settingList = settingService.findAllSettings();
		System.out.println("setting"+settingList.size());
		
		List<TemplateType> typeList = templateTypeService.findAllTypes();
		System.out.println("types"+typeList.size());
		
		List<Anagraphic> anagraphicList = anagraphicService.findByapplication(appName);
		System.out.println("types"+typeList.size());
		
		
		List<Activity> activityListNew = new ArrayList<Activity>();
		List<Color> colorListNew = new ArrayList<Color>();
		List<Setting> settingListNew = new ArrayList<Setting>();
		List<TemplateType> typeListNew = new ArrayList<TemplateType>();
		List<Anagraphic> anagraphicListNew = new ArrayList<Anagraphic>();
		
		if (activityList == null || activityList.isEmpty()) {
			
			Activity login = new Activity("Login", 0);
			activityService.save(login);
			activityListNew.add(login);
			
			Activity interaction = new Activity("Interaction", 1);
			activityService.save(interaction);
			activityListNew.add(interaction);
			
			Activity positive = new Activity("Positive", 2);
			activityService.save(positive);
			activityListNew.add(positive);
			
			Activity negative = new Activity("Negative", 3);
			activityService.save(negative);
			activityListNew.add(negative);
			
			Activity error = new Activity("Error", 4);
			activityService.save(error);
			activityListNew.add(error);
			
			Activity valutation = new Activity("Valutation", 5);
			activityService.save(valutation);
			activityListNew.add(valutation);
			
			Activity endAnagraphic = new Activity("EndAnagrafica", 6);
			activityService.save(endAnagraphic);
			activityListNew.add(endAnagraphic);
			
			Activity totAnagraphic = new Activity("TotAnagrafica", 7);
			activityService.save(totAnagraphic);
			activityListNew.add(totAnagraphic);
			
			response.put("Activity", activityListNew);
			
		}
			
		if (colorList == null || colorList.isEmpty()) {
				
			Color colorRed = new Color(2, "red", appName, "#FF0000");
			colorService.saveColor(colorRed);
			colorListNew.add(colorRed);
			
			Color colorYellow = new Color(1, "yellow", appName, "#FFFF00");
			colorService.saveColor(colorYellow);
			colorListNew.add(colorYellow);
			
			Color colorGreen = new Color(0, "green", appName, "#11db8a");
			colorService.saveColor(colorGreen);
			colorListNew.add(colorGreen);
			
			response.put("Color", colorListNew);
			
		}
		
		if (settingList == null || settingList.isEmpty()) {
				
			List<Object> possibleLang = new ArrayList<Object>();
			possibleLang.add("en");
			possibleLang.add("it");
			Setting language = new Setting ("Language", possibleLang, "en");
			settingService.saveSetting(language);
			settingListNew.add(language);
			
			List<Object> possibleDom = new ArrayList<Object>();
			possibleDom.add("GENERALE");
			possibleDom.add("SPECIFICO");
			Setting domain = new Setting ("Domain",possibleDom,"GENERALE");
			settingService.saveSetting(domain);
			settingListNew.add(domain);
			
			List<Object> possibleInt= new ArrayList<Object>();
			Setting interactions = new Setting ("Interactions", possibleInt, 10);
			settingService.saveSetting(interactions);
			settingListNew.add(interactions);
			
			response.put("Setting", settingListNew);
				
		}
		
		if (typeList == null || typeList.isEmpty()) {
				
			TemplateType libero = new TemplateType("Libero", "Libero", 1);
			templateTypeService.save(libero);
			typeListNew.add(libero);
			
			TemplateType misto = new TemplateType("Misto", "Misto", 1);
			templateTypeService.save(misto);
			typeListNew.add(misto);
			
			TemplateType controllato = new TemplateType("Controllato", "Controllato", 1);
			templateTypeService.save(controllato);
			typeListNew.add(controllato);
			
			TemplateType invalsi = new TemplateType("TestInvalsi", "TestInvalsi", 1);
			templateTypeService.save(invalsi);
			typeListNew.add(invalsi);
			
			TemplateType anagrafica = new TemplateType("Anagrafica", "Anagrafica", 1);
			templateTypeService.save(anagrafica);
			typeListNew.add(anagrafica);
			
			response.put("TemplateType", typeListNew);
				
		}
		
		if (anagraphicList == null || anagraphicList.isEmpty()) {
			
			Anagraphic anagraphicName = new Anagraphic("nome", "name", appName);
			anagraphicService.saveAnagraphic(anagraphicName);
			anagraphicListNew.add(anagraphicName);
			
			Anagraphic anagraphicSurname = new Anagraphic("cognome", "surname", appName);
			anagraphicService.saveAnagraphic(anagraphicSurname);
			anagraphicListNew.add(anagraphicSurname);
			
			Anagraphic anagraphicMail = new Anagraphic("email", "email", appName);
			anagraphicService.saveAnagraphic(anagraphicMail);
			anagraphicListNew.add(anagraphicMail);
			
			Anagraphic anagraphicPhone = new Anagraphic("numeroTelefonico", "phone", appName);
			anagraphicService.saveAnagraphic(anagraphicPhone);
			anagraphicListNew.add(anagraphicPhone);
			
			Anagraphic anagraphicCF = new Anagraphic("codiceFiscale", "cf", appName);
			anagraphicService.saveAnagraphic(anagraphicCF);
			anagraphicListNew.add(anagraphicCF);
			
			Anagraphic anagraphicCompany = new Anagraphic("azienda", "company", appName);
			anagraphicService.saveAnagraphic(anagraphicCompany);
			anagraphicListNew.add(anagraphicCompany);
			
			Anagraphic anagraphicDocName = new Anagraphic("nomeDottore", "doctor.name", appName);
			anagraphicService.saveAnagraphic(anagraphicDocName);
			anagraphicListNew.add(anagraphicDocName);
			
			Anagraphic anagraphicDocSurname = new Anagraphic("cognomeDottore", "doctor.surname", appName);
			anagraphicService.saveAnagraphic(anagraphicDocSurname);
			anagraphicListNew.add(anagraphicDocSurname);
			
			Anagraphic anagraphicDocEmail = new Anagraphic("emailDottore", "doctor.email", appName);
			anagraphicService.saveAnagraphic(anagraphicDocEmail);
			anagraphicListNew.add(anagraphicDocEmail);
			
			Anagraphic anagraphicDocPhone = new Anagraphic("telefonoDottore", "doctor.phone", appName);
			anagraphicService.saveAnagraphic(anagraphicDocPhone);
			anagraphicListNew.add(anagraphicDocPhone);
			
			Anagraphic anagraphicTransport = new Anagraphic("mezzoDiTrasporto", "transportation", appName);
			anagraphicService.saveAnagraphic(anagraphicTransport);
			anagraphicListNew.add(anagraphicTransport);
			
			Anagraphic anagraphicPDA = new Anagraphic("diffusioneDatiAnagrafici", "pda", appName);
			anagraphicService.saveAnagraphic(anagraphicPDA);
			anagraphicListNew.add(anagraphicPDA);
			
			Anagraphic anagraphicTDA = new Anagraphic("trattamentoDatiAnagrafici", "tda", appName);
			anagraphicService.saveAnagraphic(anagraphicTDA);
			anagraphicListNew.add(anagraphicTDA);
			
			Anagraphic anagraphicPositivity = new Anagraphic("positivit√†", "positivity", appName);
			anagraphicService.saveAnagraphic(anagraphicPositivity);
			anagraphicListNew.add(anagraphicPositivity);
			
			Anagraphic anagraphicQuarantine = new Anagraphic("quarantena", "quarantine", appName);
			anagraphicService.saveAnagraphic(anagraphicQuarantine);
			anagraphicListNew.add(anagraphicQuarantine);
			
			Anagraphic anagraphicFrag = new Anagraphic("lavoratoreFragile", "fragility", appName);
			anagraphicService.saveAnagraphic(anagraphicFrag);
			anagraphicListNew.add(anagraphicFrag);
			
			Anagraphic anagraphicCanWork = new Anagraphic("abilitazioneLavoro", "canWork", appName);
			anagraphicService.saveAnagraphic(anagraphicCanWork);
			anagraphicListNew.add(anagraphicCanWork);
			
			response.put("Anagraphic", anagraphicListNew);
				
		}
		
		return response;
	}

	private String loadApplicationName(String accessToken) throws RemoteException {

		return loadXSportService(accessToken).xSpGetApplication(new XSpGetApplication()).getXSpGetApplicationResult();
	}

	/*private void checkUser(String userName, String accessToken) throws RemoteException, ResourceNotFoundException {

		XSpGetUser xSpGetUser = new XSpGetUser();
		xSpGetUser.setUser(userName);

		if (loadXSportService(accessToken).xSpGetUser(xSpGetUser).getXSpGetUserResult() == null)
			throw new ResourceNotFoundException("user", userName);
	}*/

	private XSportService loadXSportService(String authToken) throws RemoteException {

		XSportService xSportService = new XSportService();
		Options options = xSportService._getServiceClient().getOptions();
		options.setManageSession(true);
		options.setProperty(org.apache.axis2.transport.http.HTTPConstants.COOKIE_STRING, authToken);

		XSpIsCurrentSessionAuthenticateResponse xSpIsCurrentSessionAuthenticateResponse = xSportService
				.xSpIsCurrentSessionAuthenticate(new XSpIsCurrentSessionAuthenticate());

		if(!xSpIsCurrentSessionAuthenticateResponse.getXSpIsCurrentSessionAuthenticateResult())
			throw new UnauthorizedException();
		
		return xSportService;
	}
	
}
