package com.pccube.vvas.template.controller;

import java.net.URI;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import java.util.Set;
import javax.validation.Valid;
import org.apache.axis2.client.Options;
import org.json.simple.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
import org.tempuri.XSportService;
import org.tempuri.XSportService.XSpGetApplication;
import com.mongodb.DuplicateKeyException;
import com.pccube.vvas.template.db.collection.Group;
import com.pccube.vvas.template.db.collection.Report;
import com.pccube.vvas.template.db.collection.Survey;
import com.pccube.vvas.template.db.collection.Template;
import com.pccube.vvas.template.db.collection.TemplateType;
import com.pccube.vvas.template.fe.TemplateIdentifier;
import com.pccube.vvas.template.fe.TemplateInfo;
import com.pccube.vvas.template.fe.VasResponse;
import com.pccube.vvas.template.service.GroupService;
import com.pccube.vvas.template.service.ReportService;
import com.pccube.vvas.template.service.SurveyService;
import com.pccube.vvas.template.service.TemplateService;
import com.pccube.vvas.template.service.TemplateTypeService;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.SwaggerDefinition;
import io.swagger.annotations.Tag;

@SwaggerDefinition(tags = { @Tag(name = "Template", description = "Operations to manage templates in VVAS") })
@RestController
@CrossOrigin(allowedHeaders = "*", origins = "*")
public class TemplateController {

	private static final Logger logger = LoggerFactory.getLogger(TemplateController.class);
	private static final String MESSAGE_401 = "You are not authorized to perform this action";

	@Autowired
	TemplateService templateService;

	@Autowired
	TemplateTypeService templateTypeService;

	@Autowired
	GroupService groupService;
	
	@Autowired
	SurveyService surveyService;
	
	@Autowired
	ReportService reportService;
	
	@Autowired
	SurveyController surveyController;


	@GetMapping(value = "/templates", produces = "application/json")
	@ResponseStatus(HttpStatus.OK)
	@ApiOperation(value = "Retrieve the list of templates", tags = "templates")
	@ApiResponses(value = { @ApiResponse(code = 200, message = "The list of templates has been successfully retrieved"),
			@ApiResponse(code = 404, message = "No template found") })
	@ResponseBody
	public List<Template> getAllTemplates(@ApiParam(value = "Zero-based page index", required = false) @RequestParam(required = false) Integer page,
			@ApiParam(value = "The size of the page to be returned", required = false) @RequestParam(required = false) Integer size) throws ResourceNotFoundException, RemoteException {
		
		logger.debug("GET templates: start");
		
		size = Integer
				.valueOf((size != null) && (size.intValue() > 0) ? size.intValue() : Integer.MAX_VALUE);
		
		page = Integer.valueOf(
				(page != null) && (page.intValue() > 0) ? (page = Integer.valueOf(page.intValue() - 1)).intValue() : 0);
			
		List<Template> templates = templateService.findAll(page, size);
		logger.info("GET templates: retrieved" + templates.size());
		if(templates.isEmpty())
			templates = new ArrayList<Template>();
			//throw new ResourceNotFoundException("Templates");
		
		return templates;
	}
	

	
	@GetMapping(value = "/templatesInfo", produces = "application/json")
	@ResponseStatus(HttpStatus.OK)
	@ApiOperation(value = "Retrieve the list of informations for each template", tags = "templates")
	@ApiResponses(value = { @ApiResponse(code = 200, message = "The list of templatesInfo has been successfully retrieved"),
			@ApiResponse(code = 404, message = "No template found") })
	@ResponseBody
	public List<TemplateInfo> getTemplatesInfo(@ApiParam(value = "Zero-based page index", required = false) @RequestParam(required = false) Integer page,
			@ApiParam(value = "The size of the page to be returned", required = false) @RequestParam(required = false) Integer size) throws ResourceNotFoundException, RemoteException {
		
		logger.debug("GET templatesInfo: start");
		
		size = Integer
				.valueOf((size != null) && (size.intValue() > 0) ? size.intValue() : Integer.MAX_VALUE);
		page = Integer.valueOf(
				(page != null) && (page.intValue() > 0) ? (page = Integer.valueOf(page.intValue() - 1)).intValue() : 0);
			
		List<TemplateInfo> templates = templateService.findTemplatesInfo(page, size);
		logger.info("GET templatesInfo: retrieved " + templates.size());
		if(templates.isEmpty())
			throw new ResourceNotFoundException("TemplatesInfo");
		
		return templates;
	}
	
	

	@RequestMapping(value = { "/getPublishedTemplates" }, method = {
			org.springframework.web.bind.annotation.RequestMethod.GET,
			org.springframework.web.bind.annotation.RequestMethod.POST }, produces = { "application/json" })
	@ResponseBody
	public VasResponse getPublishedTemplates() {
		VasResponse response = new VasResponse(Integer.valueOf(0), "OK", null);
		try {
			logger.info("[getPublishedTemplates] Invoke - Input not required");
			List<Template> templates = this.templateService.findByStatus(Integer.valueOf(1));
			logger.info("[getPublishedTemplates] Result - TemplateList Size=" + templates.size());
			response.setContent(templates);
		} catch (Throwable th) {
			logger.error("[getPublishedTemplates] Errore=" + th.getMessage());
			response = new VasResponse(Integer.valueOf(1), "Errore generico del server", null);
		}
		return response;
	}
	
	
	//'TODO check lato service
	@PostMapping(value = "/template", produces = "application/json")
	@ResponseStatus(HttpStatus.CREATED)
	@ApiOperation(value = "Create a new template", tags = "templates")
	@ApiResponses(value = { @ApiResponse(code = 201, message = "The template has been successfully created"),
			@ApiResponse(code = 404, message = "No template title found") })
	@ResponseBody
	public ResponseEntity<URI> postTemplate(@ApiParam(value = "The object template", required = true) @Valid @RequestBody Template template) 
			throws RemoteException, ResourceNotFoundException{
		
		String templateName = template.getTitle();
		logger.debug("POST template: start: " + templateName);
		
		try {
			
			return ResponseEntity.created(ServletUriComponentsBuilder.fromCurrentRequest().pathSegment("{id}")
					.buildAndExpand(templateService.saveTemplate(template).getTemplateId()).toUri()).build();
			
		} catch (DuplicateKeyException e1) {

			throw new ResourceAlreadyExistsException("Template", template.getTitle());
		}

	}
		

	@RequestMapping(value = { "/publishTemplate" }, method = {
			org.springframework.web.bind.annotation.RequestMethod.GET,
			org.springframework.web.bind.annotation.RequestMethod.POST }, produces = { "application/json" })
	@ResponseBody
	public VasResponse publishTemplate(@RequestBody Template template) {
		VasResponse response = new VasResponse(Integer.valueOf(0), "OK", null);
		String templateName = template.getTitle();
		logger.debug("JSON INPUT Template Name = ?", templateName);
		if (StringUtils.isEmpty(templateName)) {
			response = new VasResponse(Integer.valueOf(1), "Errore generico", null);
		} else {
			template = this.templateService.publishTemplate(template);
			response.setContent(new TemplateIdentifier(template.getTemplateId()));
		}
		return response;
	}

	
	
	@GetMapping(value = "/template/{templateId}", produces = "application/json")
	@ResponseStatus(HttpStatus.OK)
	@ApiOperation(value = "Retrieve the template by the id", tags = "templates")
	@ApiResponses(value = { @ApiResponse(code = 200, message = "The template has been successfully retrieved"),
			@ApiResponse(code = 404, message = "No template found") })
	@ResponseBody
	public Template getTemplate(@ApiParam(value = "The id of the template", required = true) @PathVariable String templateId) throws ResourceNotFoundException {

		logger.debug("GET Template: start ");
			
		Template template = templateService.findTemplateById(templateId);
		logger.debug("The template has been retrieved");
		
		return template;
	}

	@PatchMapping(value = "/templateStatus", produces = "application/json")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	@ApiOperation(value = "Change the status of template", tags = "templates")
	@ApiResponses(value = { @ApiResponse(code = 204, message = "The status has been successfully changed"),
			@ApiResponse(code = 404, message = "No template found") })
	@ResponseBody
	public void patchTemplateStatus(@ApiParam(value = "Template id", required = true) @RequestParam String templateId) throws ResourceNotFoundException {

		logger.info("CHANGE status: start ");
		
		Template template = templateService.findTemplateById(templateId);
		
		if(template.getStatus() == 0)
			template.setStatus(Integer.valueOf(2));
		else
			template.setStatus(Integer.valueOf(0));
		
		templateService.editTemplateStatus(template);

	}
	
	@GetMapping(value = "/templateStatus", produces = "application/json")
	@ResponseStatus(HttpStatus.OK)
	@ApiOperation(value = "Get the status of the template", tags = "templates")
	@ApiResponses(value = { @ApiResponse(code = 200, message = "The Status has been successfully retrieved"),
			@ApiResponse(code = 404, message = "No template found") })
	@ResponseBody
	public Integer getTemplateStatus(@ApiParam(value = "Template id", required = true) @RequestParam String templateId) throws ResourceNotFoundException {
		
		logger.debug("GET Template: start ");
		
		Template template = templateService.findTemplateById(templateId);
		logger.debug("The template has been retrieved");

		return template.getStatus();
	}

	@PatchMapping(value = "/icon", produces = "application/json")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	@ApiOperation(value = "Update the icon related to a specific template", tags = "templates")
	@ApiResponses(value = { @ApiResponse(code = 204, message = "Icon updated"),
			@ApiResponse(code = 404, message = "No template found") })
	@ResponseBody
	public TemplateIdentifier updateIcon(@ApiParam(value = "The Template", required = true) @RequestBody Template template) 
		throws ResourceNotFoundException {

		String templateId = template.getTemplateId();
		logger.debug("JSON INPUT Template Id = ?", templateId);
		
		if (StringUtils.isEmpty(templateId))
			throw new ResourceNotFoundException("Template");
		else
			templateService.updateIcon(template);

		return new TemplateIdentifier(templateId);
	}
	

	@GetMapping(value = "/icons/{templateId}", produces = {"image/jpeg", "image/gif",
			"image/png"})
	@ResponseStatus(HttpStatus.OK)
	@ApiOperation(value = "Retrieve the icon of template", tags = "templates")
	@ApiResponses(value = { @ApiResponse(code = 200, message = "The icon of template has been successfully retrieved"),
			@ApiResponse(code = 404, message = "No template found") })
	@ResponseBody
	public HttpEntity<byte[]> icons(@ApiParam(value = "The template Id", required = true) @PathVariable String templateId) throws ResourceNotFoundException {

		HttpEntity<byte[]> icon = templateService.findGridFsIconByTemplateId(templateId);
		if ((icon.getBody() != null) && (((byte[]) icon.getBody()).length > 0))
			return icon;
		else
			throw new ResourceNotFoundException("Template", templateId); 
		
	}

	

	@GetMapping(value = "/templateTypes", produces = "application/json")
	@ResponseStatus(HttpStatus.OK)
	@ApiOperation(value = "Retrieve the list of template types", tags = "templateTypes")
	@ApiResponses(value = { @ApiResponse(code = 200, message = "The list of types has been successfully retrieved"),
			@ApiResponse(code = 404, message = "No templateType found") })
	@ResponseBody
	public List<TemplateType> getTemplateTypes(@ApiParam(value = "The status of the templateType", required = false) @RequestParam(required = false) Integer status, 
			@ApiParam(value = "Zero-based page index", required = false) @RequestParam(required = false) Integer page,
			@ApiParam(value = "The size of the page to be returned", required = false) @RequestParam(required = false) Integer size) throws ResourceNotFoundException, RemoteException {
		
		logger.debug("GET Types: start ");
		
		size = Integer
				.valueOf((size != null) && (size.intValue() > 0) ? size.intValue() : Integer.MAX_VALUE);
		page = Integer.valueOf(
				(page != null) && (page.intValue() > 0) ? (page = Integer.valueOf(page.intValue() - 1)).intValue() : 0);
			
		List<TemplateType> types = templateTypeService.findTypes(status, page, size);
		logger.debug("GET types: retrieved " + types.size());
		
		return types;
	}
	
	@PostMapping(value = "/templateType", produces = "application/json")
	@ResponseStatus(HttpStatus.CREATED)
	@ApiOperation(value = "Create a type of template", tags = "templateTypes")
	@ApiResponses(value = { @ApiResponse(code = 201, message = "The type has been successfully created"),
			@ApiResponse(code = 409, message = "A type with this name already exists") })
	@ResponseBody
	public ResponseEntity<URI> addTemplateType(@ApiParam(value = "The type id") @RequestParam String templateTypeId, 
			@ApiParam(value = "The type name") @RequestParam String templateTypeName) {

		logger.debug("POST templateType : start");
				
		try {
			
			templateTypeId = templateTypeId.replace(" ", "");
			TemplateType newTemplateType = new TemplateType(templateTypeId, templateTypeName, Integer.valueOf(1));
			
			return ResponseEntity.created(ServletUriComponentsBuilder.fromCurrentRequest().pathSegment("{id}")
					.buildAndExpand(templateTypeService.save(newTemplateType)).toUri()).build();
			
		} catch (DuplicateKeyException e) {

			throw new ResourceAlreadyExistsException("templateType", templateTypeName);
		}
	}
	
	@DeleteMapping("/templateType")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	@ApiOperation(value = "Delete a templateType", tags = "templateTypes")
	@ApiResponses(value = { @ApiResponse(code = 204, message = "Template type has been successfully deleted"),
		@ApiResponse(code = 404, message = "Template type not found") })
	public void deleteTemplateType(@ApiParam(value = "Template type id", required = true) @RequestParam String templateTypeId) throws ResourceNotFoundException {
		
		logger.debug("Delete TemplateType : start ");
		
		templateTypeService.deleteTemplateType(templateTypeId);
		
		logger.debug("Template Deleted");
	
	}
	
	@PutMapping(value = "/templateType", produces = "application/json")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	@ApiOperation(value = "Modify a type of template", tags = "templateTypes")
	@ApiResponses(value = { @ApiResponse(code = 204, message = "The templateType has been successfully modified"),
			@ApiResponse(code = 404, message = "No templateType found") })
	@ResponseBody
	public void putTemplateType(@ApiParam(value = "Old templateType id", required = true) @RequestParam String oldTemplateTypeId,
			@ApiParam(value = "New templateType name", required = true) @RequestParam String templateTypeNameNew) throws ResourceNotFoundException {

		TemplateType templateType = templateTypeService.findTemplateTypeById(oldTemplateTypeId);
		Integer statusOld = templateType.getStatus();
		
		templateTypeService.deleteTemplateType(oldTemplateTypeId);
		
		String newTemplateTypeId = templateTypeNameNew.replace(" ", "");
		TemplateType newTemplateType = new TemplateType(newTemplateTypeId, templateTypeNameNew, statusOld);
		
		templateTypeService.save(newTemplateType);

	}
	
	@GetMapping(value = "/templateType", produces = "application/json")
	@ResponseStatus(HttpStatus.OK)
	@ApiOperation(value = "Retrieve the templateType", tags = "templateTypes")
	@ApiResponses(value = { @ApiResponse(code = 200, message = "The type has been successfully retrieved"),
			@ApiResponse(code = 404, message = "No type found") })
	@ResponseBody
	public TemplateType getTemplateType(@ApiParam(value = "Zero-based page index", required = false) @RequestParam(required = false) Integer page,
			@ApiParam(value = "The size of the page to be returned", required = false) @RequestParam(required = false) Integer size,
			@ApiParam(value = "The name of the templateType to search") @RequestParam String templateTypeName) throws ResourceNotFoundException {

		logger.debug("GET TemplateType : start ");
		
		TemplateType templateType = new TemplateType();
		
		size = Integer
				.valueOf((size != null) && (size.intValue() > 0) ? size.intValue() : Integer.MAX_VALUE);
		
		page = Integer.valueOf(
				(page != null) && (page.intValue() > 0) ? (page = Integer.valueOf(page.intValue() - 1)).intValue() : 0);
			
		List<TemplateType> templateTypesList = templateTypeService.findAll(page, size);
		for (TemplateType t : templateTypesList) {
			if(templateTypeName.equals(t.getTemplateTypeName())) {
				templateType=t;
				break;
			}
		}
		
		return templateType;
			
	}

	@GetMapping(value = "/dataset", produces = "application/json")
	@ResponseStatus(HttpStatus.OK)
	@ApiOperation(value = "Get the dataset of the template", tags = "templates")
	@ApiResponses(value = { @ApiResponse(code = 200, message = "The dataset has been successfully retrieved"),
			@ApiResponse(code = 404, message = "No dataset found") })
	@ResponseBody
	public ResponseEntity<?> returnDataset(@ApiParam(value = "The Id of the template", required = true) @RequestParam(required = true) String templateId) {
		
		logger.debug("GET Dataset : start ");
		
		ResponseEntity<?> responseEntity;
		
		try {
			
			Template template = templateService.findTemplateById(templateId);
			String templateDatasetb64 = template.getDataset();
			byte[] decodedBytes = Base64.getDecoder().decode(templateDatasetb64);
			// FileUtils.writeByteArrayToFile(new File("dataset.xlsx"), decodedBytes);
			responseEntity = templateId != null ? ResponseEntity.ok(decodedBytes) : ResponseEntity.notFound().build();

		} catch (Exception e) {
			
			responseEntity = ResponseEntity.badRequest().body(e.getMessage());
			logger.error("GET dataset: exception ", e);
			
		}
		
		return responseEntity;
	}
	
	@PatchMapping(value = "/templateType", produces = "application/json")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	@ApiOperation(value = "Change the status of a template type", tags = "templateTypes")
	@ApiResponses(value = { @ApiResponse(code = 204, message = "TemplateType status updated"),
			@ApiResponse(code = 404, message = "No templateType found") })
	@ResponseBody
	public void patchTemplateTypeStatus(@ApiParam(value = "The templateType Id", required = true) @RequestParam String templateTypeId) throws ResourceNotFoundException {

		logger.debug("Changing status of templateType = " + templateTypeId);
		
		TemplateType templateType = templateTypeService.findTemplateTypeById(templateTypeId);
		Integer status = templateType.getStatus();
		
		if (status == 1) {
			templateType.setStatus(Integer.valueOf(0));
		} else {
			templateType.setStatus(Integer.valueOf(1));
		}
		
		templateTypeService.save(templateType);

	}
	
	@GetMapping(value = "/templatesByGroupAndStatus", produces = "application/json")
	@ResponseStatus(HttpStatus.OK)
	@ApiOperation(value = "Retrieve the list of templates by the name of a group", tags = "templates")
	@ApiResponses(value = { @ApiResponse(code = 200, message = "The list of templates has been successfully retrieved"),
			@ApiResponse(code = 401, message = MESSAGE_401),
			@ApiResponse(code = 404, message = "No template found") })
	@ResponseBody
	public List<Template> getTemplatesByGroupAndStatus(@RequestHeader("Authorization") String accessToken,
			@ApiParam(value = "The name of the group", required = true) @RequestParam String groupName,
			@ApiParam(value = "The status of the templates", required = false) @RequestParam(required=false) Integer status,
			@ApiParam(value = "Zero-based page index", required = false) @RequestParam(required = false) Integer page, 
			@ApiParam(value = "The size of the page to be returned", required = false) @RequestParam(required = false) Integer pagesize) throws ResourceNotFoundException, RemoteException{

		pagesize = Integer
				.valueOf((pagesize != null) && (pagesize.intValue() > 0) ? pagesize.intValue() : Integer.MAX_VALUE);
		page = Integer.valueOf(
				(page != null) && (page.intValue() > 0) ? (page = Integer.valueOf(page.intValue() - 1)).intValue() : 0);

		logger.info("[getAllByGroup] Invoke - Input not required");
		
		List<Template> listTemp;
		
		Group group = groupService.find(groupName,  loadApplicationName(accessToken));
		Set<String> templatesIds = group.getTemplates();
		
		if(status != null)
			listTemp = templateService.findTemplatesByIdsAndStatus(templatesIds, status);
		else
			listTemp = templateService.findTemplatesByIds(templatesIds);
		
		if (listTemp.isEmpty())
			throw new ResourceNotFoundException("Templates");
		
		return listTemp;
	}
	
	@GetMapping(value = "/templatesLight", produces = "application/json")
	@ResponseStatus(HttpStatus.OK)
	@ApiOperation(value = "Retrieve the list of templates by the name of a group", tags = "templates")
	@ApiResponses(value = { @ApiResponse(code = 200, message = "The list of templates has been successfully retrieved"),
			@ApiResponse(code = 401, message = MESSAGE_401),
			@ApiResponse(code = 404, message = "No template found") })
	@ResponseBody
	public List<Template> getTemplatesLight(@RequestHeader("Authorization") String accessToken,
			@ApiParam(value = "The name of the group", required = true) @RequestParam String groupName,
			@ApiParam(value = "The status of the templates", required = false) @RequestParam(required=false) Integer status,
			@ApiParam(value = "Zero-based page index", required = false) @RequestParam(required = false) Integer page, 
			@ApiParam(value = "The size of the page to be returned", required = false) @RequestParam(required = false) Integer pagesize) throws ResourceNotFoundException, RemoteException{

		pagesize = Integer
				.valueOf((pagesize != null) && (pagesize.intValue() > 0) ? pagesize.intValue() : Integer.MAX_VALUE);
		page = Integer.valueOf(
				(page != null) && (page.intValue() > 0) ? (page = Integer.valueOf(page.intValue() - 1)).intValue() : 0);

		logger.info("[getAllByGroup] Invoke - Input not required");
		
		List<Template> listTemp;
		
		Group group = groupService.find(groupName,  loadApplicationName(accessToken));
		Set<String> templatesIds = group.getTemplates();
		
		if(status != null)
			listTemp = templateService.findTemplatesInfoByIdsAndStatus(templatesIds, status);
		else
			listTemp = templateService.findTemplatesInfoByIds(templatesIds);
		
		if (listTemp.isEmpty())
			listTemp = new ArrayList<Template>();
			//throw new ResourceNotFoundException("Templates");
		
		return listTemp;
	}
	
	
	private String loadApplicationName(String accessToken) throws RemoteException  {

		 XSportService xSportService=new XSportService();
			
		Options options = xSportService._getServiceClient().getOptions();
		options.setManageSession(true);
		options.setProperty(org.apache.axis2.transport.http.HTTPConstants.COOKIE_STRING, accessToken);
		
		return xSportService.xSpGetApplication(new XSpGetApplication()).getXSpGetApplicationResult();
	}
	
	//'TODO check new DELETEtemplate add delete report
	@DeleteMapping("/deleteTemplate/{id}")
	@ResponseStatus(HttpStatus.OK)
	@ApiOperation(value = "Delete a template", tags = "templates")
	@ApiResponses(value = { @ApiResponse(code = 204, message = "Template has been successfully deleted"),
			@ApiResponse(code = 404, message = "Template not found") })
	public String deleteTemplate(@ApiParam(value = "The id of the template", required = true) @PathVariable String id) throws ResourceNotFoundException {

		logger.debug("Remove Input = " + id);
		
		String out;
		
		List<Survey> surveyList = surveyService.findSurveyByTemplateId(id);
		int countSurvey=0;
		
		if (surveyList != null) {
			for(Survey s: surveyList) {
				surveyController.deleteSurveyAndAttachement(s.getSurveyId());
				countSurvey++;
			}
		}
		
		List<Report> reports = reportService.findReportByTemplateId(id);
		int countReport=0;
		
		if (reports != null) {
			for(Report r: reports) {
				reportService.delete(r.getId());
				countReport++;
			}
		}

		templateService.deleteTemplate(id);
		
		out = "Surveys deleted: " + countSurvey + "Reports deleted: " + countReport ;
		
		return out;
		
	}
	
	//'TODO : Retrieve templates by templateType (ticket research)
	@SuppressWarnings("unchecked")
	@PostMapping(value = "/templatesByType", produces = "application/json")
	@ResponseStatus(HttpStatus.OK)
	@ApiOperation(value = "Retrieve the list of templates by the name of a group and the type of template", tags = "templates")
	@ApiResponses(value = { @ApiResponse(code = 200, message = "The list of templates has been successfully retrieved"),
			@ApiResponse(code = 401, message = MESSAGE_401),
			@ApiResponse(code = 404, message = "No template found") })
	@ResponseBody
	public List<JSONObject> findTemplateByGroupAndType( 
			@RequestHeader("Authorization") String accessToken, 
			@ApiParam(value = "The name of the group", required = true) @RequestParam String groupName,
			@ApiParam(value = "The status of the templates", required = false) @RequestParam(required=false) Integer status, 
			@ApiParam(value = "The list of template types") @RequestBody List<String> templateType) throws RemoteException {
	    
	    Group group = groupService.find(groupName,  loadApplicationName(accessToken));
	    Set<String> templatesIds = group.getTemplates();
	    //List<Template> listTemp = templateService.findTemplatesByIdsAndStatus(templatesIds, status);
	    List<Template> listTemp = templateService.findTemplatesByIds(templatesIds);
	    System.out.println("temp size "+listTemp.size());
	    List<JSONObject> returnList = new ArrayList<JSONObject>();
	    for (Template temp : listTemp) {
	      JSONObject obj =new JSONObject();
	      if( templateType.contains(temp.getTemplateType() ) ) {
	        obj.put("templateId", temp.getTemplateId());
	        obj.put("title", temp.getTitle());
	        returnList.add(obj);
	      }
	    }
	    System.out.println(returnList.size());
	    return returnList;

	}
	
}