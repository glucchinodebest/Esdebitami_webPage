/**
 * 
 */
package com.pccube.vvas.ai.handlers;

import java.util.function.Consumer;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import com.pccube.vvas.ai.beans.response.VasResponse;
import com.pccube.vvas.ai.exceptions.Errors;
import com.pccube.vvas.ai.exceptions.ServiceException;

/**
 * @author Utente
 *
 */
@ControllerAdvice(basePackages="com.pccube.vvas.ai.controller")
public class BaseControllerAdvice extends ResponseEntityExceptionHandler{

	private static Logger LOG = LoggerFactory.getLogger(BaseControllerAdvice.class);
	
	public BaseControllerAdvice() {
		super();
	}
	
	@ExceptionHandler(Exception.class)
    @ResponseBody
    ResponseEntity<VasResponse> handleControllerException(HttpServletRequest request,Exception ex) {
		LOG.info("####################START handleControllerException:"+request.getAttribute("javax.servlet.error.status_code"));
        HttpStatus status = null;
        VasResponse vasResponse = new VasResponse();
		vasResponse.setContent(null);
		if (ex instanceof MethodArgumentNotValidException) {
			LOG.info("MethodArgumentNotValidException");
			status = HttpStatus.BAD_REQUEST;
		}else {
			status = HttpStatus.INTERNAL_SERVER_ERROR;
			vasResponse.setStatusCode(status.value());
			vasResponse.setStatusMessage(ex.getMessage());
		}
		LOG.error(ex.getMessage(), ex);
        return new ResponseEntity<VasResponse>(vasResponse, status);
    }
	
	@Override
	protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException methodArgumentNotValidException,
			HttpHeaders headers, HttpStatus status, WebRequest request) {	
		methodArgumentNotValidException.getBindingResult().getAllErrors().forEach(new Consumer<ObjectError>() {
			@Override
			public void accept(ObjectError err) {
				LOG.info(err.getObjectName()+":"+err.getDefaultMessage()+":constraints:"+err.getCode());				
			}			
		});;
		return super.handleMethodArgumentNotValid(methodArgumentNotValidException, headers, status, request);
	}
	
	@Override
	protected ResponseEntity<Object> handleExceptionInternal(Exception ex, Object body, HttpHeaders headers,
			HttpStatus status, WebRequest request) {
		LOG.info("START handleExceptionInternal");
		ResponseEntity<Object> responseEntity = super.handleExceptionInternal(ex, body, headers, status, request);
		VasResponse vasResponse = new VasResponse();
		vasResponse.setContent(responseEntity.getBody());
		Errors responseError = Errors.fromCode(responseEntity.getStatusCodeValue(), Errors.NOT_MANAGED);
		vasResponse.setStatusCode(responseError.getCode());
		vasResponse.setStatusMessage(responseError.getMessage());
		LOG.info("STOP handleExceptionInternal");
		return new ResponseEntity<Object>(vasResponse, responseEntity.getStatusCode());
	}
	
	@ExceptionHandler(ServiceException.class)
	@ResponseBody
	public ResponseEntity<VasResponse> serviceExceptionHandler(HttpServletRequest req, ServiceException ex) {
//		if (e.getEx() != null) {
//			Logger.getLogger(e.getClazz()).error(e.getEx().getClass());
//			for (int i = 0; i < e.getEx().getStackTrace().length; i++) {
//				Logger.getLogger("").error(e.getEx().getStackTrace()[i]);
//			}
//		} else {
//			for (int i = 0; i < e.getStackTrace().length; i++) {
//				Logger.getLogger("").error(e.getStackTrace()[i]);
//			}
//		}
		LOG.error(ex.getMessage(), ex);
		VasResponse vasResponse = new VasResponse();
		vasResponse.setContent(null);
		vasResponse.setStatusCode(Integer.valueOf(ex.getError().getCode()));
		vasResponse.setStatusMessage(ex.getError().getMessage());
		return new ResponseEntity<VasResponse>(vasResponse, ex.getError().getStatus());
	}

    private HttpStatus getStatus(HttpServletRequest request) {
        Integer statusCode = (Integer) request.getAttribute("javax.servlet.error.status_code");
        if (statusCode == null) {
            return HttpStatus.INTERNAL_SERVER_ERROR;
        }
        return HttpStatus.valueOf(statusCode);
    }

}
